"""

********
LESSON 1
********

===========================================================================================

(There are 2 versions of Python, but this lesson will focus on Python 2)

PRINT STATEMENTS
----------------
In Python, messages are printed to the terminal by using the word print, followed by the
message itself.  So with the aforementioned example, to print to the terminal “Hello World”,
one would code the following:
>>> print “Hello World”


STRINGS
-------
As seen above, quotation marks are used around the message to be printed: "Hello World"
This is necessary because in Python, a textual message is called a "string", a special type
of data (or data type).  Strings can consist of any combination of letters, numbers, and
symbols, and can be represented in 2 primary ways: with 'single quotes' and with "double
quotes", as long as they are matched.  Therefore, the following are both valid and equivalent methods of printing the same string:
>>> print “Hello World”
>>> print 'Hello World'


VARIABLES
---------
Furthermore, all data types can be stored in variables that can be defined with any name.
Python convention, however, is to use underscores between multiple words in a single
variable.  For example, the below will also print "Hello World":
>>> message = "Hello World"
>>> print message


BOOLEANS
--------
Another data type is the boolean.  Boolean values can only take one of two values.
In Python, they are represented as True and False, and corespond to integers 1 and 0,
respectively.  (Note that these are not to be confused for strings "True" and "False")
>>> True
>>> False


COMPARATORS
-----------
There are 6 comparators that can be used to compare 2 values in Python, to assess if they
are equal, less than, greater than, (and so on) one another.

They are as follows:
    ==  equal to
    !=  not equal to
    <   less than
    <=  less than or equal to
    >   greater than
    >=  greater than or equal to

For example, the below will output True because the condition is true:
>>> 3 + 5 <= 8

CONDITIONALS
------------
Conditional statements can be written to dictate whether or not, or "if" a following block
of code should be executed.  The following code associated with that particular conditional
statement, or condition, is always indented (generally 4 spaces, called "white spaces").

IF statements are an example of this.  For example, the following code would return 'Y' if
and only if the 'if statement', '1 + 2 == 3' is true.
>>> if 1 + 2 == 3:
        return True

ELSE statements can be used to complement if statements, and dictate what should happen in
the case that a paired IF statement is not true.  ELSE statements can only exist with IF
statements (and cannot exist alone).  For example, the following code would return 'else
statement' in any case where x is not equal to 2.
>>> x = 3
    if x == 2:
        return "if statement"
    else:
        return "else statement"

ELIF is short for 'else if', and dictates whether or not the following block of code should
be executed, as long as the previous if and elif conditions were not met.  For example, the
following code would return 'elif statement'.
>>> x = 3
    if x == 2:
        return "if statement"
    elif x == 3:
        return "elif statement"
    else:
        return "else statement"

"""
